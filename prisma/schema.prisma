generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String?
  cpf       String    @unique
  password  String
  createdAt DateTime  @default(now())
  typeUser  Int       @default(1)
  updatedAt DateTime  @default(now())
  Address   Address[]
  Cart      Cart[]
  Order     Order[]

  @@map("users")
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  uf        String
  City      City[]

  @@map("states")
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  stateId   Int
  Addresses Address[]
  State     State     @relation(fields: [stateId], references: [id])

  @@map("cities")
}

model Address {
  id            Int      @id @default(autoincrement())
  complement    String?
  numberAddress Int
  cep           String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  cityId        Int
  userId        Int
  City          City     @relation(fields: [cityId], references: [id])
  User          User     @relation(fields: [userId], references: [id])
  Order         Order[]

  @@map("addresses")
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  price        Float
  image        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  categoryId   Int
  Category     Category       @relation(fields: [categoryId], references: [id])
  CartProduct  CartProduct[]
  OrderProduct OrderProduct[]

  @@map("products")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Products  Product[]

  @@map("categories")
}

model Cart {
  id          Int           @id @default(autoincrement())
  userId      Int
  isActive    Boolean
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  User        User          @relation(fields: [userId], references: [id])
  CartProduct CartProduct[]

  @@map("carts")
}

model CartProduct {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Cart      Cart     @relation(fields: [cartId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])

  @@map("cart_products")
}

model Payment {
  id                  Int               @id @default(autoincrement())
  statusId            Int
  price               Float
  discount            Float
  finalPrice          Float
  type                String
  paymentPixId        Int
  paymentCreditCardId Int
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())
  Status              Status            @relation(fields: [statusId], references: [id])
  PixPayment          PixPayment        @relation(fields: [paymentPixId], references: [id])
  CreditCardPayment   CreditCardPayment @relation(fields: [paymentCreditCardId], references: [id])
  Order               Order[]

  @@map("payments")
}

model PixPayment {
  id          Int       @id @default(autoincrement())
  code        String
  datePayment DateTime  @default(now())
  Payment     Payment[]

  @@map("pix_payments")
}

model CreditCardPayment {
  id             Int       @id @default(autoincrement())
  amountPayments Int
  Payment        Payment[]

  @@map("credit_card_payments")
}

model Status {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Payment   Payment[]

  @@map("status")
}

model Order {
  id           Int            @id @default(autoincrement())
  userId       Int
  addressId    Int
  paymentId    Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  User         User           @relation(fields: [userId], references: [id])
  Address      Address        @relation(fields: [addressId], references: [id])
  Payment      Payment        @relation(fields: [paymentId], references: [id])
  OrderProduct OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  amount    Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Order     Order    @relation(fields: [orderId], references: [id])
  Product   Product  @relation(fields: [productId], references: [id])

  @@map("order_products")
}
