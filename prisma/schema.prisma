generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  phone     String?
  cpf       String    @unique
  password  String
  createdAt DateTime  @default(now())
  typeUser  Int       @default(1)
  updatedAt DateTime  @default(now())
  Address   Address[]

  @@map("users")
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  uf        String
  City      City[]

  @@map("states")
}

model City {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  stateId   Int
  Addresses Address[]
  State     State     @relation(fields: [stateId], references: [id])

  @@map("cities")
}

model Address {
  id            Int      @id @default(autoincrement())
  complement    String?
  numberAddress Int
  cep           String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  cityId        Int
  userId        Int
  City          City     @relation(fields: [cityId], references: [id])
  User          User     @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String
  price      Float
  image      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  categoryId Int
  Category   Category @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Products  Product[]

  @@map("categories")
}
